{"ast":null,"code":"import getPokemons from '../services/pokemons';\nimport axios from 'axios';\nimport { loadPokemonsFromLS, savePokemonsList } from '../utils/localStoragePokemons';\nimport produce from 'immer';\n\nconst pokemonsReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'INIT_POKEMONS':\n      return produce(state, draft => {\n        draft.splice(0, 1);\n        console.log(draft);\n        action.pokemons.forEach(p => draft.push(p));\n        console.log(draft);\n        return draft;\n      });\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport const thunkYourMom = (limit, offset) => {\n  return async dispatch => {\n    try {\n      const pokemons = loadPokemonsFromLS(limit, offset);\n      dispatch(recieveAllPokemons(pokemons));\n    } catch (error) {\n      const pokemons = await getPokemons.getPokemons(limit, offset);\n      let pokemonsArray = [];\n      let pokemonsObject = {};\n      pokemons.results.forEach(async (r, i) => {\n        //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\n        const pokemonNow = await axios.get(r.url);\n        pokemonsArray.push(pokemonNow.data);\n        pokemonsObject[i] = pokemonNow.data;\n      });\n      savePokemonsList(limit, offset, pokemonsObject);\n      dispatch(recieveAllPokemons(pokemonsArray));\n    }\n\n    ;\n  };\n};\nexport const fetchEverything = (limit, offset) => {\n  return thunkYourMom(limit, offset);\n};\n\nconst recieveAllPokemons = pokemons => {\n  return {\n    type: 'INIT_POKEMONS',\n    pokemons\n  };\n};\n/*\r\nexport const fetchPokemons = (limit, offset) => {\r\n    return async dispatch => {\r\n        try {\r\n            const pokemons = loadPokemonsFromLS(limit, offset);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemons });\r\n        } catch (error) {\r\n            const pokemons = await getPokemons.getPokemons(limit, offset);\r\n            let pokemonsArray = [];\r\n            let pokemonsObject = {};\r\n            pokemons.results.forEach(async (r, i) => {\r\n                //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\r\n                const pokemonNow = await axios.get(r.url);\r\n                pokemonsArray.push(pokemonNow.data);\r\n                pokemonsObject[i] = pokemonNow.data\r\n            });\r\n            savePokemonsList(limit, offset, pokemonsObject);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemonsArray });\r\n        };\r\n    };   \r\n};*/\n\n\nexport default pokemonsReducer;","map":{"version":3,"sources":["C:/Users/pablo/OneDrive/Escritorio/pokedex-react/pokedex/frontend/src/reducers/pokemonsReducer.js"],"names":["getPokemons","axios","loadPokemonsFromLS","savePokemonsList","produce","pokemonsReducer","state","action","type","draft","splice","console","log","pokemons","forEach","p","push","thunkYourMom","limit","offset","dispatch","recieveAllPokemons","error","pokemonsArray","pokemonsObject","results","r","i","pokemonNow","get","url","data","fetchEverything"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,sBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,+BAArD;AACA,OAAOC,OAAP,MAAoB,OAApB;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAuB;AAC3C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACI,aAAOJ,OAAO,CAACE,KAAD,EAASG,KAAD,IAAW;AAC7BA,QAAAA,KAAK,CAACC,MAAN,CAAa,CAAb,EAAgB,CAAhB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACAF,QAAAA,MAAM,CAACM,QAAP,CAAgBC,OAAhB,CAAwBC,CAAC,IAAIN,KAAK,CAACO,IAAN,CAAWD,CAAX,CAA7B;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,eAAOA,KAAP;AACH,OANa,CAAd;;AAOJ;AACI,aAAOH,KAAP;AAVR;;AAWC;AACJ,CAbD;;AAeA,OAAO,MAAMW,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3C,SAAO,MAAMC,QAAN,IAAkB;AACrB,QAAI;AACA,YAAMP,QAAQ,GAAGX,kBAAkB,CAACgB,KAAD,EAAQC,MAAR,CAAnC;AACAC,MAAAA,QAAQ,CAACC,kBAAkB,CAACR,QAAD,CAAnB,CAAR;AACH,KAHD,CAGE,OAAOS,KAAP,EAAc;AACZ,YAAMT,QAAQ,GAAG,MAAMb,WAAW,CAACA,WAAZ,CAAwBkB,KAAxB,EAA+BC,MAA/B,CAAvB;AACA,UAAII,aAAa,GAAG,EAApB;AACA,UAAIC,cAAc,GAAG,EAArB;AACAX,MAAAA,QAAQ,CAACY,OAAT,CAAiBX,OAAjB,CAAyB,OAAOY,CAAP,EAAUC,CAAV,KAAgB;AACrC;AACA,cAAMC,UAAU,GAAG,MAAM3B,KAAK,CAAC4B,GAAN,CAAUH,CAAC,CAACI,GAAZ,CAAzB;AACAP,QAAAA,aAAa,CAACP,IAAd,CAAmBY,UAAU,CAACG,IAA9B;AACAP,QAAAA,cAAc,CAACG,CAAD,CAAd,GAAoBC,UAAU,CAACG,IAA/B;AACH,OALD;AAMA5B,MAAAA,gBAAgB,CAACe,KAAD,EAAQC,MAAR,EAAgBK,cAAhB,CAAhB;AACAJ,MAAAA,QAAQ,CAACC,kBAAkB,CAACE,aAAD,CAAnB,CAAR;AACH;;AAAA;AACJ,GAjBD;AAkBH,CAnBM;AAqBP,OAAO,MAAMS,eAAe,GAAG,CAACd,KAAD,EAAQC,MAAR,KAAmB;AAC9C,SAAOF,YAAY,CAACC,KAAD,EAAQC,MAAR,CAAnB;AACH,CAFM;;AAIP,MAAME,kBAAkB,GAAIR,QAAD,IAAc;AACrC,SAAO;AACHL,IAAAA,IAAI,EAAE,eADH;AAEHK,IAAAA;AAFG,GAAP;AAIH,CALD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeR,eAAf","sourcesContent":["import getPokemons from '../services/pokemons';\r\nimport axios from 'axios';\r\nimport { loadPokemonsFromLS, savePokemonsList } from '../utils/localStoragePokemons';\r\nimport produce from 'immer';\r\n\r\nconst pokemonsReducer = (state = [], action) =>{\r\n    switch(action.type){\r\n        case 'INIT_POKEMONS':\r\n            return produce(state, (draft) => {\r\n                draft.splice(0, 1);\r\n                console.log(draft);\r\n                action.pokemons.forEach(p => draft.push(p));\r\n                console.log(draft);\r\n                return draft;\r\n            })\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport const thunkYourMom = (limit, offset) => {\r\n    return async dispatch => {\r\n        try {\r\n            const pokemons = loadPokemonsFromLS(limit, offset);\r\n            dispatch(recieveAllPokemons(pokemons));\r\n        } catch (error) {\r\n            const pokemons = await getPokemons.getPokemons(limit, offset);\r\n            let pokemonsArray = [];\r\n            let pokemonsObject = {};\r\n            pokemons.results.forEach(async (r, i) => {\r\n                //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\r\n                const pokemonNow = await axios.get(r.url);\r\n                pokemonsArray.push(pokemonNow.data);\r\n                pokemonsObject[i] = pokemonNow.data\r\n            });\r\n            savePokemonsList(limit, offset, pokemonsObject);\r\n            dispatch(recieveAllPokemons(pokemonsArray));\r\n        };\r\n    };    \r\n};\r\n\r\nexport const fetchEverything = (limit, offset) => {\r\n    return thunkYourMom(limit, offset);\r\n};\r\n\r\nconst recieveAllPokemons = (pokemons) => {\r\n    return {\r\n        type: 'INIT_POKEMONS',\r\n        pokemons,\r\n    };\r\n};\r\n/*\r\nexport const fetchPokemons = (limit, offset) => {\r\n    return async dispatch => {\r\n        try {\r\n            const pokemons = loadPokemonsFromLS(limit, offset);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemons });\r\n        } catch (error) {\r\n            const pokemons = await getPokemons.getPokemons(limit, offset);\r\n            let pokemonsArray = [];\r\n            let pokemonsObject = {};\r\n            pokemons.results.forEach(async (r, i) => {\r\n                //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\r\n                const pokemonNow = await axios.get(r.url);\r\n                pokemonsArray.push(pokemonNow.data);\r\n                pokemonsObject[i] = pokemonNow.data\r\n            });\r\n            savePokemonsList(limit, offset, pokemonsObject);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemonsArray });\r\n        };\r\n    };   \r\n};*/\r\n\r\nexport default pokemonsReducer;"]},"metadata":{},"sourceType":"module"}