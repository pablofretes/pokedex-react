{"ast":null,"code":"import loginService from '../services/login';\nimport reviewsService from '../services/reviews';\nimport { notificationSuccess, notificationError } from './notificationReducer';\n\nconst loginReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'LOG_IN':\n      return action.data;\n\n    case 'LOGGED_IN':\n      return action.data;\n\n    case 'LOGOUT':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport const existingLogin = () => {\n  const loggedUserJSON = window.localStorage.getItem('loggedUser');\n\n  if (loggedUserJSON) {\n    const userLog = JSON.parse(loggedUserJSON);\n    reviewsService.setToken(userLog.token);\n    return {\n      type: 'LOGGED_IN',\n      data: userLog\n    };\n  }\n\n  ;\n  return {\n    type: 'LOGOUT'\n  };\n};\nexport const logoutUser = () => {\n  window.localStorage.removeItem('loggedUser');\n  return {\n    type: 'LOGOUT'\n  };\n};\nexport const newLogin = credentials => {\n  return async dispatch => {\n    try {\n      const userLog = await loginService.login(credentials);\n      window.localStorage.setItem('loggedUser', JSON.stringify(userLog));\n      reviewsService.setToken(userLog.token);\n      console.log(userLog);\n      dispatch({\n        type: 'LOG_IN',\n        data: userLog\n      });\n      dispatch(notificationSuccess(`Welcome ${userLog.username}`));\n    } catch (err) {\n      dispatch(notificationError(err));\n      dispatch(notificationError('Incorrect Username or Password'));\n      window.localStorage.clear();\n    }\n  };\n};\nexport default loginReducer;","map":{"version":3,"sources":["C:/Users/pablo/OneDrive/Escritorio/pokedex-react/pokedex/frontend/src/reducers/loginReducer.js"],"names":["loginService","reviewsService","notificationSuccess","notificationError","loginReducer","state","action","type","data","existingLogin","loggedUserJSON","window","localStorage","getItem","userLog","JSON","parse","setToken","token","logoutUser","removeItem","newLogin","credentials","dispatch","login","setItem","stringify","console","log","username","err","clear"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,mBAAzB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,SAASC,mBAAT,EAA8BC,iBAA9B,QAAuD,uBAAvD;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAG,IAAT,EAAeC,MAAf,KAA0B;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACA,SAAK,QAAL;AACE,aAAOD,MAAM,CAACE,IAAd;;AACF,SAAK,WAAL;AACE,aAAOF,MAAM,CAACE,IAAd;;AACF,SAAK,QAAL;AACE,aAAO,IAAP;;AACF;AAAS,aAAOH,KAAP;AAPT;AASD,CAVD;;AAYA,OAAO,MAAMI,aAAa,GAAG,MAAM;AAEjC,QAAMC,cAAc,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,YAA5B,CAAvB;;AACA,MAAGH,cAAH,EAAkB;AAChB,UAAMI,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWN,cAAX,CAAhB;AACAT,IAAAA,cAAc,CAACgB,QAAf,CAAwBH,OAAO,CAACI,KAAhC;AACA,WAAO;AACLX,MAAAA,IAAI,EAAE,WADD;AAELC,MAAAA,IAAI,EAAEM;AAFD,KAAP;AAID;;AAAA;AAED,SAAO;AACLP,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAfM;AAiBP,OAAO,MAAMY,UAAU,GAAG,MAAM;AAC9BR,EAAAA,MAAM,CAACC,YAAP,CAAoBQ,UAApB,CAA+B,YAA/B;AACA,SAAO;AACLb,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CALM;AAOP,OAAO,MAAMc,QAAQ,GAAIC,WAAD,IAAiB;AACvC,SAAO,MAAMC,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMT,OAAO,GAAG,MAAMd,YAAY,CAACwB,KAAb,CAAmBF,WAAnB,CAAtB;AACAX,MAAAA,MAAM,CAACC,YAAP,CAAoBa,OAApB,CAA4B,YAA5B,EAA0CV,IAAI,CAACW,SAAL,CAAeZ,OAAf,CAA1C;AACAb,MAAAA,cAAc,CAACgB,QAAf,CAAwBH,OAAO,CAACI,KAAhC;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYd,OAAZ;AACAS,MAAAA,QAAQ,CAAC;AACPhB,QAAAA,IAAI,EAAE,QADC;AAEPC,QAAAA,IAAI,EAAEM;AAFC,OAAD,CAAR;AAIAS,MAAAA,QAAQ,CAACrB,mBAAmB,CAAE,WAAUY,OAAO,CAACe,QAAS,EAA7B,CAApB,CAAR;AACD,KAVD,CAWA,OAAOC,GAAP,EAAY;AACVP,MAAAA,QAAQ,CAACpB,iBAAiB,CAAC2B,GAAD,CAAlB,CAAR;AACAP,MAAAA,QAAQ,CAACpB,iBAAiB,CAAC,gCAAD,CAAlB,CAAR;AACAQ,MAAAA,MAAM,CAACC,YAAP,CAAoBmB,KAApB;AACD;AACF,GAjBD;AAkBD,CAnBM;AAqBP,eAAe3B,YAAf","sourcesContent":["import loginService from '../services/login';\r\nimport reviewsService from '../services/reviews';\r\nimport { notificationSuccess, notificationError } from './notificationReducer';\r\n\r\nconst loginReducer = (state = null, action) => {\r\n  switch (action.type) {\r\n  case 'LOG_IN':\r\n    return action.data;\r\n  case 'LOGGED_IN':\r\n    return action.data;\r\n  case 'LOGOUT':\r\n    return null\r\n  default: return state;\r\n  }\r\n}\r\n\r\nexport const existingLogin = () => {\r\n\r\n  const loggedUserJSON = window.localStorage.getItem('loggedUser');\r\n  if(loggedUserJSON){\r\n    const userLog = JSON.parse(loggedUserJSON);\r\n    reviewsService.setToken(userLog.token);\r\n    return {\r\n      type: 'LOGGED_IN',\r\n      data: userLog\r\n    };\r\n  };\r\n\r\n  return {\r\n    type: 'LOGOUT'\r\n  };\r\n};\r\n\r\nexport const logoutUser = () => {\r\n  window.localStorage.removeItem('loggedUser');\r\n  return {\r\n    type: 'LOGOUT'\r\n  };\r\n};\r\n\r\nexport const newLogin = (credentials) => {\r\n  return async dispatch => {\r\n    try {\r\n      const userLog = await loginService.login(credentials);\r\n      window.localStorage.setItem('loggedUser', JSON.stringify(userLog));\r\n      reviewsService.setToken(userLog.token);\r\n      console.log(userLog);\r\n      dispatch({\r\n        type: 'LOG_IN',\r\n        data: userLog\r\n      });\r\n      dispatch(notificationSuccess(`Welcome ${userLog.username}`));\r\n    }\r\n    catch (err) {\r\n      dispatch(notificationError(err));\r\n      dispatch(notificationError('Incorrect Username or Password'));\r\n      window.localStorage.clear();\r\n    }\r\n  }\r\n}\r\n\r\nexport default loginReducer"]},"metadata":{},"sourceType":"module"}