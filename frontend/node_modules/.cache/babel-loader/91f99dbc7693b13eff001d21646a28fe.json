{"ast":null,"code":"import getPokemons from '../services/pokemons';\nimport axios from 'axios';\nimport { loadPokemonsFromLS, savePokemonsList } from '../utils/localStoragePokemons';\nimport produce from 'immer';\nconst initialState = [];\n\nconst pokemonsReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'INIT_POKEMONS':\n      return [action.data, ...state.map(i => Object.assign({}, i, {\n        pok: i\n      }))];\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport const thunkYourMom = (limit, offset) => {\n  return async dispatch => {\n    try {\n      const pokemons = await getPokemons.getPokemons(limit, offset);\n      let pokemonsArray = [];\n      let pokemonsObject = {};\n      pokemons.results.forEach(async (r, i) => {\n        //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\n        const pokemonNow = await axios.get(r.url);\n        pokemonsArray.push(pokemonNow.data);\n        pokemonsObject[i] = pokemonNow.data;\n      });\n      savePokemonsList(limit, offset, pokemonsObject);\n      dispatch(recieveAllPokemons(pokemonsArray));\n    } catch (error) {\n      return null;\n    }\n\n    ;\n  };\n};\nexport const fetchEverything = (limit, offset) => {\n  return thunkYourMom(limit, offset);\n};\n\nconst recieveAllPokemons = pokemons => {\n  return {\n    type: 'INIT_POKEMONS',\n    data: pokemons\n  };\n};\n/*\r\nexport const fetchPokemons = (limit, offset) => {\r\n    return async dispatch => {\r\n        try {\r\n            const pokemons = loadPokemonsFromLS(limit, offset);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemons });\r\n        } catch (error) {\r\n            const pokemons = await getPokemons.getPokemons(limit, offset);\r\n            let pokemonsArray = [];\r\n            let pokemonsObject = {};\r\n            pokemons.results.forEach(async (r, i) => {\r\n                //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\r\n                const pokemonNow = await axios.get(r.url);\r\n                pokemonsArray.push(pokemonNow.data);\r\n                pokemonsObject[i] = pokemonNow.data\r\n            });\r\n            savePokemonsList(limit, offset, pokemonsObject);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemonsArray });\r\n        };\r\n    };   \r\n};*/\n\n\nexport default pokemonsReducer;","map":{"version":3,"sources":["C:/Users/pablo/OneDrive/Escritorio/pokedex-react/pokedex/frontend/src/reducers/pokemonsReducer.js"],"names":["getPokemons","axios","loadPokemonsFromLS","savePokemonsList","produce","initialState","pokemonsReducer","state","action","type","data","map","i","Object","assign","pok","thunkYourMom","limit","offset","dispatch","pokemons","pokemonsArray","pokemonsObject","results","forEach","r","pokemonNow","get","url","push","recieveAllPokemons","error","fetchEverything"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,sBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,+BAArD;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,MAAMC,YAAY,GAAG,EAArB;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAuB;AAC3C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACI,aAAO,CACHD,MAAM,CAACE,IADJ,EAEH,GAAGH,KAAK,CAACI,GAAN,CAAUC,CAAC,IAAIC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,CAAlB,EAAqB;AAAEG,QAAAA,GAAG,EAAEH;AAAP,OAArB,CAAf,CAFA,CAAP;;AAIJ;AACI,aAAOL,KAAP;AAPR;;AAQC;AACJ,CAVD;;AAYA,OAAO,MAAMS,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3C,SAAO,MAAMC,QAAN,IAAkB;AACrB,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMpB,WAAW,CAACA,WAAZ,CAAwBiB,KAAxB,EAA+BC,MAA/B,CAAvB;AACA,UAAIG,aAAa,GAAG,EAApB;AACA,UAAIC,cAAc,GAAG,EAArB;AACAF,MAAAA,QAAQ,CAACG,OAAT,CAAiBC,OAAjB,CAAyB,OAAOC,CAAP,EAAUb,CAAV,KAAgB;AACrC;AACA,cAAMc,UAAU,GAAG,MAAMzB,KAAK,CAAC0B,GAAN,CAAUF,CAAC,CAACG,GAAZ,CAAzB;AACAP,QAAAA,aAAa,CAACQ,IAAd,CAAmBH,UAAU,CAAChB,IAA9B;AACAY,QAAAA,cAAc,CAACV,CAAD,CAAd,GAAoBc,UAAU,CAAChB,IAA/B;AACH,OALD;AAMAP,MAAAA,gBAAgB,CAACc,KAAD,EAAQC,MAAR,EAAgBI,cAAhB,CAAhB;AACAH,MAAAA,QAAQ,CAACW,kBAAkB,CAACT,aAAD,CAAnB,CAAR;AACH,KAZD,CAYE,OAAOU,KAAP,EAAc;AACZ,aAAO,IAAP;AACH;;AAAA;AACJ,GAhBD;AAiBH,CAlBM;AAoBP,OAAO,MAAMC,eAAe,GAAG,CAACf,KAAD,EAAQC,MAAR,KAAmB;AAC9C,SAAOF,YAAY,CAACC,KAAD,EAAQC,MAAR,CAAnB;AACH,CAFM;;AAIP,MAAMY,kBAAkB,GAAIV,QAAD,IAAc;AACrC,SAAO;AACHX,IAAAA,IAAI,EAAE,eADH;AAEHC,IAAAA,IAAI,EAAEU;AAFH,GAAP;AAIH,CALD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAed,eAAf","sourcesContent":["import getPokemons from '../services/pokemons';\r\nimport axios from 'axios';\r\nimport { loadPokemonsFromLS, savePokemonsList } from '../utils/localStoragePokemons';\r\nimport produce from 'immer';\r\n\r\nconst initialState = [];\r\n\r\nconst pokemonsReducer = (state = [], action) =>{\r\n    switch(action.type){\r\n        case 'INIT_POKEMONS':\r\n            return [\r\n                action.data,\r\n                ...state.map(i => Object.assign({}, i, { pok: i }))\r\n            ];\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport const thunkYourMom = (limit, offset) => {\r\n    return async dispatch => {\r\n        try {           \r\n            const pokemons = await getPokemons.getPokemons(limit, offset);\r\n            let pokemonsArray = [];\r\n            let pokemonsObject = {};\r\n            pokemons.results.forEach(async (r, i) => {\r\n                //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\r\n                const pokemonNow = await axios.get(r.url);\r\n                pokemonsArray.push(pokemonNow.data);\r\n                pokemonsObject[i] = pokemonNow.data\r\n            });\r\n            savePokemonsList(limit, offset, pokemonsObject);\r\n            dispatch(recieveAllPokemons(pokemonsArray));\r\n        } catch (error) {\r\n            return null;\r\n        };\r\n    };   \r\n};\r\n\r\nexport const fetchEverything = (limit, offset) => {\r\n    return thunkYourMom(limit, offset);\r\n};\r\n\r\nconst recieveAllPokemons = (pokemons) => {\r\n    return {\r\n        type: 'INIT_POKEMONS',\r\n        data: pokemons,\r\n    };\r\n};\r\n/*\r\nexport const fetchPokemons = (limit, offset) => {\r\n    return async dispatch => {\r\n        try {\r\n            const pokemons = loadPokemonsFromLS(limit, offset);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemons });\r\n        } catch (error) {\r\n            const pokemons = await getPokemons.getPokemons(limit, offset);\r\n            let pokemonsArray = [];\r\n            let pokemonsObject = {};\r\n            pokemons.results.forEach(async (r, i) => {\r\n                //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\r\n                const pokemonNow = await axios.get(r.url);\r\n                pokemonsArray.push(pokemonNow.data);\r\n                pokemonsObject[i] = pokemonNow.data\r\n            });\r\n            savePokemonsList(limit, offset, pokemonsObject);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemonsArray });\r\n        };\r\n    };   \r\n};*/\r\n\r\nexport default pokemonsReducer;"]},"metadata":{},"sourceType":"module"}