{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from \"react\";\nexport const DOTS = '...';\n\nconst range = (start, end) => {\n  let length = end - start + 1;\n  return Array.from({\n    length\n  }, (_, idx) => idx + start);\n};\n\nexport const usePagination = ({\n  totalCount,\n  pageSize,\n  siblingCount = 1,\n  currentPage\n}) => {\n  _s();\n\n  const paginationRange = useMemo(() => {\n    const totalPageCount = Math.ceil(totalCount / pageSize);\n    const totalPageNumbers = siblingCount + 5;\n\n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount);\n    }\n\n    ;\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n    const firstPageIndex = 1;\n    const lastPageIndex = totalPageCount;\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      let leftItemCount = 3 + 2 * siblingCount;\n      let leftRange = range(1, leftItemCount);\n      return [...leftRange, DOTS, totalPageCount];\n    }\n\n    ;\n\n    if (!shouldShowRightDots && shouldShowLeftDots) {\n      let rightItemCount = 3 + 2 * siblingCount;\n      let rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);\n      return [firstPageIndex, DOTS, ...rightRange];\n    }\n\n    ;\n\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n    }\n\n    ;\n  }, [totalCount, pageSize, siblingCount, currentPage]);\n  return paginationRange;\n};\n\n_s(usePagination, \"tLviJI6rwkyze3+kNwkFLwjvB48=\");","map":{"version":3,"sources":["C:/Users/pablo/OneDrive/Escritorio/pokedex-react/pokedex/frontend/src/hooks/usePagination.js"],"names":["useMemo","DOTS","range","start","end","length","Array","from","_","idx","usePagination","totalCount","pageSize","siblingCount","currentPage","paginationRange","totalPageCount","Math","ceil","totalPageNumbers","leftSiblingIndex","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","leftRange","rightItemCount","rightRange","middleRange"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,OAAO,MAAMC,IAAI,GAAG,KAAb;;AAEP,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC1B,MAAIC,MAAM,GAAGD,GAAG,GAAGD,KAAN,GAAc,CAA3B;AAEA,SAAOG,KAAK,CAACC,IAAN,CAAW;AAAEF,IAAAA;AAAF,GAAX,EAAuB,CAACG,CAAD,EAAIC,GAAJ,KAAYA,GAAG,GAAGN,KAAzC,CAAP;AACH,CAJD;;AAMA,OAAO,MAAMO,aAAa,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,QAAd;AAAwBC,EAAAA,YAAY,GAAG,CAAvC;AAA0CC,EAAAA;AAA1C,CAAD,KAA6D;AAAA;;AAEtF,QAAMC,eAAe,GAAGf,OAAO,CAAC,MAAM;AAClC,UAAMgB,cAAc,GAAGC,IAAI,CAACC,IAAL,CAAUP,UAAU,GAAGC,QAAvB,CAAvB;AAEA,UAAMO,gBAAgB,GAAGN,YAAY,GAAG,CAAxC;;AAEA,QAAGM,gBAAgB,IAAIH,cAAvB,EAAsC;AAClC,aAAOd,KAAK,CAAC,CAAD,EAAIc,cAAJ,CAAZ;AACH;;AAAA;AAED,UAAMI,gBAAgB,GAAGH,IAAI,CAACI,GAAL,CAASP,WAAW,GAAGD,YAAvB,EAAqC,CAArC,CAAzB;AACA,UAAMS,iBAAiB,GAAGL,IAAI,CAACM,GAAL,CAAST,WAAW,GAAGD,YAAvB,EAAqCG,cAArC,CAA1B;AAEA,UAAMQ,kBAAkB,GAAGJ,gBAAgB,GAAG,CAA9C;AACA,UAAMK,mBAAmB,GAAGH,iBAAiB,GAAGN,cAAc,GAAG,CAAjE;AACA,UAAMU,cAAc,GAAG,CAAvB;AACA,UAAMC,aAAa,GAAGX,cAAtB;;AAEA,QAAG,CAACQ,kBAAD,IAAuBC,mBAA1B,EAA+C;AAC3C,UAAIG,aAAa,GAAG,IAAI,IAAIf,YAA5B;AACA,UAAIgB,SAAS,GAAG3B,KAAK,CAAC,CAAD,EAAI0B,aAAJ,CAArB;AAEA,aAAO,CAAC,GAAGC,SAAJ,EAAe5B,IAAf,EAAqBe,cAArB,CAAP;AACH;;AAAA;;AAED,QAAG,CAACS,mBAAD,IAAwBD,kBAA3B,EAA+C;AAC3C,UAAIM,cAAc,GAAG,IAAI,IAAIjB,YAA7B;AACA,UAAIkB,UAAU,GAAG7B,KAAK,CAACc,cAAc,GAAGc,cAAjB,GAAkC,CAAnC,EAAsCd,cAAtC,CAAtB;AAEA,aAAO,CAACU,cAAD,EAAiBzB,IAAjB,EAAuB,GAAG8B,UAA1B,CAAP;AACH;;AAAA;;AAED,QAAGP,kBAAkB,IAAIC,mBAAzB,EAA8C;AAC1C,UAAIO,WAAW,GAAG9B,KAAK,CAACkB,gBAAD,EAAmBE,iBAAnB,CAAvB;AAEA,aAAO,CAACI,cAAD,EAAiBzB,IAAjB,EAAuB,GAAG+B,WAA1B,EAAuC/B,IAAvC,EAA6C0B,aAA7C,CAAP;AACH;;AAAA;AAEJ,GArC8B,EAqC5B,CAAChB,UAAD,EAAaC,QAAb,EAAuBC,YAAvB,EAAqCC,WAArC,CArC4B,CAA/B;AAuCA,SAAOC,eAAP;AACH,CA1CM;;GAAML,a","sourcesContent":["import { useMemo } from \"react\";\r\n\r\nexport const DOTS = '...';\r\n\r\nconst range = (start, end) => {\r\n    let length = end - start + 1;\r\n\r\n    return Array.from({ length }, (_, idx) => idx + start);\r\n}\r\n\r\nexport const usePagination = ({ totalCount, pageSize, siblingCount = 1, currentPage }) => {\r\n\r\n    const paginationRange = useMemo(() => {\r\n        const totalPageCount = Math.ceil(totalCount / pageSize);\r\n\r\n        const totalPageNumbers = siblingCount + 5;\r\n\r\n        if(totalPageNumbers >= totalPageCount){\r\n            return range(1, totalPageCount);\r\n        };\r\n\r\n        const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\r\n        const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\r\n\r\n        const shouldShowLeftDots = leftSiblingIndex > 2;\r\n        const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\r\n        const firstPageIndex = 1;\r\n        const lastPageIndex = totalPageCount;\r\n\r\n        if(!shouldShowLeftDots && shouldShowRightDots) {\r\n            let leftItemCount = 3 + 2 * siblingCount;\r\n            let leftRange = range(1, leftItemCount);\r\n\r\n            return [...leftRange, DOTS, totalPageCount];\r\n        };\r\n\r\n        if(!shouldShowRightDots && shouldShowLeftDots) {\r\n            let rightItemCount = 3 + 2 * siblingCount;\r\n            let rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);\r\n\r\n            return [firstPageIndex, DOTS, ...rightRange];\r\n        };\r\n\r\n        if(shouldShowLeftDots && shouldShowRightDots) {\r\n            let middleRange = range(leftSiblingIndex, rightSiblingIndex);\r\n\r\n            return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\r\n        };\r\n\r\n    }, [totalCount, pageSize, siblingCount, currentPage]);\r\n\r\n    return paginationRange;\r\n};"]},"metadata":{},"sourceType":"module"}