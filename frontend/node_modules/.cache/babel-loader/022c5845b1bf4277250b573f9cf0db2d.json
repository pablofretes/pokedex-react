{"ast":null,"code":"import getPokemons from '../services/pokemons';\nimport axios from 'axios';\nimport { loadPokemonsFromLS, savePokemonsList } from '../utils/localStoragePokemons';\nimport produce from 'immer';\nconst initialState = [];\n\nconst pokemonsReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'INIT_POKEMONS':\n      return action.data;\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport const thunkYourMom = (limit, offset) => {\n  return async dispatch => {\n    try {\n      const pokemons = loadPokemonsFromLS(limit, offset);\n      dispatch({\n        type: 'INIT_POKEMONS',\n        data: pokemons\n      });\n    } catch (error) {\n      const pokemons = await getPokemons.getPokemons(limit, offset);\n      let pokemonsArray = [];\n      let pokemonsObject = {};\n      pokemons.results.forEach(async (r, i) => {\n        //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\n        const pokemonNow = await axios.get(r.url);\n        pokemonsArray.push(pokemonNow.data);\n        pokemonsObject[i] = pokemonNow.data;\n      });\n      savePokemonsList(limit, offset, pokemonsObject);\n      dispatch({\n        type: 'INIT_POKEMONS',\n        data: pokemonsArray\n      });\n    }\n\n    ;\n  };\n};\nexport const fetchEverything = (limit, offset) => {\n  return thunkYourMom(limit, offset);\n};\n\nconst recieveAllPokemons = pokemons => {\n  return {\n    type: 'INIT_POKEMONS',\n    data: pokemons\n  };\n};\n/*\r\nexport const fetchPokemons = (limit, offset) => {\r\n    return async dispatch => {\r\n        try {\r\n            const pokemons = loadPokemonsFromLS(limit, offset);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemons });\r\n        } catch (error) {\r\n            const pokemons = await getPokemons.getPokemons(limit, offset);\r\n            let pokemonsArray = [];\r\n            let pokemonsObject = {};\r\n            pokemons.results.forEach(async (r, i) => {\r\n                //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\r\n                const pokemonNow = await axios.get(r.url);\r\n                pokemonsArray.push(pokemonNow.data);\r\n                pokemonsObject[i] = pokemonNow.data\r\n            });\r\n            savePokemonsList(limit, offset, pokemonsObject);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemonsArray });\r\n        };\r\n    };   \r\n};*/\n\n\nexport default pokemonsReducer;","map":{"version":3,"sources":["C:/Users/pablo/OneDrive/Escritorio/pokedex-react/pokedex/frontend/src/reducers/pokemonsReducer.js"],"names":["getPokemons","axios","loadPokemonsFromLS","savePokemonsList","produce","initialState","pokemonsReducer","state","action","type","data","thunkYourMom","limit","offset","dispatch","pokemons","error","pokemonsArray","pokemonsObject","results","forEach","r","i","pokemonNow","get","url","push","fetchEverything","recieveAllPokemons"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,sBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,+BAArD;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,MAAMC,YAAY,GAAG,EAArB;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAuB;AAC3C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACI,aAAOD,MAAM,CAACE,IAAd;;AACJ;AACI,aAAOH,KAAP;AAJR;;AAKC;AACJ,CAPD;;AASA,OAAO,MAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3C,SAAO,MAAMC,QAAN,IAAkB;AACrB,QAAI;AACA,YAAMC,QAAQ,GAAGb,kBAAkB,CAACU,KAAD,EAAQC,MAAR,CAAnC;AACAC,MAAAA,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAE,eAAR;AAAyBC,QAAAA,IAAI,EAAEK;AAA/B,OAAD,CAAR;AACH,KAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,YAAMD,QAAQ,GAAG,MAAMf,WAAW,CAACA,WAAZ,CAAwBY,KAAxB,EAA+BC,MAA/B,CAAvB;AACA,UAAII,aAAa,GAAG,EAApB;AACA,UAAIC,cAAc,GAAG,EAArB;AACAH,MAAAA,QAAQ,CAACI,OAAT,CAAiBC,OAAjB,CAAyB,OAAOC,CAAP,EAAUC,CAAV,KAAgB;AACrC;AACA,cAAMC,UAAU,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CAAUH,CAAC,CAACI,GAAZ,CAAzB;AACAR,QAAAA,aAAa,CAACS,IAAd,CAAmBH,UAAU,CAACb,IAA9B;AACAQ,QAAAA,cAAc,CAACI,CAAD,CAAd,GAAoBC,UAAU,CAACb,IAA/B;AACH,OALD;AAMAP,MAAAA,gBAAgB,CAACS,KAAD,EAAQC,MAAR,EAAgBK,cAAhB,CAAhB;AACAJ,MAAAA,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAE,eAAR;AAAyBC,QAAAA,IAAI,EAAEO;AAA/B,OAAD,CAAR;AACH;;AAAA;AACJ,GAjBD;AAkBH,CAnBM;AAqBP,OAAO,MAAMU,eAAe,GAAG,CAACf,KAAD,EAAQC,MAAR,KAAmB;AAC9C,SAAOF,YAAY,CAACC,KAAD,EAAQC,MAAR,CAAnB;AACH,CAFM;;AAIP,MAAMe,kBAAkB,GAAIb,QAAD,IAAc;AACrC,SAAO;AACHN,IAAAA,IAAI,EAAE,eADH;AAEHC,IAAAA,IAAI,EAAEK;AAFH,GAAP;AAIH,CALD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeT,eAAf","sourcesContent":["import getPokemons from '../services/pokemons';\r\nimport axios from 'axios';\r\nimport { loadPokemonsFromLS, savePokemonsList } from '../utils/localStoragePokemons';\r\nimport produce from 'immer';\r\n\r\nconst initialState = [];\r\n\r\nconst pokemonsReducer = (state = [], action) =>{\r\n    switch(action.type){\r\n        case 'INIT_POKEMONS':\r\n            return action.data;\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport const thunkYourMom = (limit, offset) => {\r\n    return async dispatch => {\r\n        try {\r\n            const pokemons = loadPokemonsFromLS(limit, offset);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemons });\r\n        } catch (error) {\r\n            const pokemons = await getPokemons.getPokemons(limit, offset);\r\n            let pokemonsArray = [];\r\n            let pokemonsObject = {};\r\n            pokemons.results.forEach(async (r, i) => {\r\n                //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\r\n                const pokemonNow = await axios.get(r.url);\r\n                pokemonsArray.push(pokemonNow.data);\r\n                pokemonsObject[i] = pokemonNow.data\r\n            });\r\n            savePokemonsList(limit, offset, pokemonsObject);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemonsArray });\r\n        };\r\n    };    \r\n};\r\n\r\nexport const fetchEverything = (limit, offset) => {\r\n    return thunkYourMom(limit, offset);\r\n};\r\n\r\nconst recieveAllPokemons = (pokemons) => {\r\n    return {\r\n        type: 'INIT_POKEMONS',\r\n        data: pokemons,\r\n    };\r\n};\r\n/*\r\nexport const fetchPokemons = (limit, offset) => {\r\n    return async dispatch => {\r\n        try {\r\n            const pokemons = loadPokemonsFromLS(limit, offset);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemons });\r\n        } catch (error) {\r\n            const pokemons = await getPokemons.getPokemons(limit, offset);\r\n            let pokemonsArray = [];\r\n            let pokemonsObject = {};\r\n            pokemons.results.forEach(async (r, i) => {\r\n                //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\r\n                const pokemonNow = await axios.get(r.url);\r\n                pokemonsArray.push(pokemonNow.data);\r\n                pokemonsObject[i] = pokemonNow.data\r\n            });\r\n            savePokemonsList(limit, offset, pokemonsObject);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemonsArray });\r\n        };\r\n    };   \r\n};*/\r\n\r\nexport default pokemonsReducer;"]},"metadata":{},"sourceType":"module"}