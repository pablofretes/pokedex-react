{"ast":null,"code":"import getPokemons from '../services/pokemons';\nimport axios from 'axios';\nimport { loadPokemonsFromLS, savePokemonsList } from '../utils/localStoragePokemons';\nimport produce from 'immer';\nconst pokemonsReducer = produce((state = {\n  pokemons: []\n}, action) => {\n  switch (action.type) {\n    case 'INIT_POKEMONS':\n      console.log(action);\n      return action.pokemons;\n\n    default:\n      return state;\n  }\n\n  ;\n});\nexport const thunkYourMom = (limit, offset) => {\n  return async dispatch => {\n    try {\n      const pokemons = loadPokemonsFromLS(limit, offset);\n      dispatch({\n        type: 'INIT_POKEMONS',\n        pokemons\n      });\n    } catch (error) {\n      const pokemonsData = await getPokemons.getPokemons(limit, offset);\n      let pokemons = [];\n      let pokemonsObject = {};\n      console.log(pokemonsData);\n      pokemonsData.results.forEach(async (r, i) => {\n        //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\n        const pokemonNow = await axios.get(r.url);\n        pokemonsObject[i] = pokemonNow.data;\n      });\n      pokemons = [{ ...pokemonsObject\n      }];\n      console.log(pokemons);\n      console.log(pokemonsObject);\n      savePokemonsList(limit, offset, pokemonsObject);\n      dispatch({\n        type: 'INIT_POKEMONS',\n        pokemons\n      });\n    }\n\n    ;\n  };\n};\nexport const fetchEverything = (limit, offset) => {\n  return thunkYourMom(limit, offset);\n};\n/*\r\nexport const fetchPokemons = (limit, offset) => {\r\n    return async dispatch => {\r\n        try {\r\n            const pokemons = loadPokemonsFromLS(limit, offset);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemons });\r\n        } catch (error) {\r\n            const pokemons = await getPokemons.getPokemons(limit, offset);\r\n            let pokemonsArray = [];\r\n            let pokemonsObject = {};\r\n            pokemons.results.forEach(async (r, i) => {\r\n                //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\r\n                const pokemonNow = await axios.get(r.url);\r\n                pokemonsArray.push(pokemonNow.data);\r\n                pokemonsObject[i] = pokemonNow.data\r\n            });\r\n            savePokemonsList(limit, offset, pokemonsObject);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemonsArray });\r\n        };\r\n    };   \r\n};*/\n\nexport default pokemonsReducer;","map":{"version":3,"sources":["C:/Users/pablo/OneDrive/Escritorio/pokedex-react/pokedex/frontend/src/reducers/pokemonsReducer.js"],"names":["getPokemons","axios","loadPokemonsFromLS","savePokemonsList","produce","pokemonsReducer","state","pokemons","action","type","console","log","thunkYourMom","limit","offset","dispatch","error","pokemonsData","pokemonsObject","results","forEach","r","i","pokemonNow","get","url","data","fetchEverything"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,sBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,+BAArD;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,MAAMC,eAAe,GAAGD,OAAO,CAAC,CAACE,KAAK,GAAG;AAAEC,EAAAA,QAAQ,EAAC;AAAX,CAAT,EAA0BC,MAA1B,KAAqC;AACjE,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,aAAOA,MAAM,CAACD,QAAd;;AACJ;AACI,aAAOD,KAAP;AALR;;AAMC;AACJ,CAR8B,CAA/B;AAUA,OAAO,MAAMM,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3C,SAAO,MAAMC,QAAN,IAAkB;AACrB,QAAI;AACA,YAAMR,QAAQ,GAAGL,kBAAkB,CAACW,KAAD,EAAQC,MAAR,CAAnC;AACAC,MAAAA,QAAQ,CAAC;AAAEN,QAAAA,IAAI,EAAE,eAAR;AAAyBF,QAAAA;AAAzB,OAAD,CAAR;AACH,KAHD,CAGE,OAAOS,KAAP,EAAc;AACZ,YAAMC,YAAY,GAAG,MAAMjB,WAAW,CAACA,WAAZ,CAAwBa,KAAxB,EAA+BC,MAA/B,CAA3B;AACA,UAAIP,QAAQ,GAAG,EAAf;AACA,UAAIW,cAAc,GAAG,EAArB;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYM,YAAZ;AACAA,MAAAA,YAAY,CAACE,OAAb,CAAqBC,OAArB,CAA6B,OAAOC,CAAP,EAAUC,CAAV,KAAgB;AACzC;AACA,cAAMC,UAAU,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CAAUH,CAAC,CAACI,GAAZ,CAAzB;AACAP,QAAAA,cAAc,CAACI,CAAD,CAAd,GAAoBC,UAAU,CAACG,IAA/B;AACH,OAJD;AAKAnB,MAAAA,QAAQ,GAAG,CAAC,EAAC,GAAGW;AAAJ,OAAD,CAAX;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYO,cAAZ;AACAf,MAAAA,gBAAgB,CAACU,KAAD,EAAQC,MAAR,EAAgBI,cAAhB,CAAhB;AACAH,MAAAA,QAAQ,CAAC;AAAEN,QAAAA,IAAI,EAAE,eAAR;AAAyBF,QAAAA;AAAzB,OAAD,CAAR;AACH;;AAAA;AACJ,GApBD;AAqBH,CAtBM;AAwBP,OAAO,MAAMoB,eAAe,GAAG,CAACd,KAAD,EAAQC,MAAR,KAAmB;AAC9C,SAAOF,YAAY,CAACC,KAAD,EAAQC,MAAR,CAAnB;AACH,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeT,eAAf","sourcesContent":["import getPokemons from '../services/pokemons';\r\nimport axios from 'axios';\r\nimport { loadPokemonsFromLS, savePokemonsList } from '../utils/localStoragePokemons';\r\nimport produce from 'immer';\r\n\r\nconst pokemonsReducer = produce((state = { pokemons:[] }, action) => {\r\n    switch(action.type){\r\n        case 'INIT_POKEMONS':\r\n            console.log(action);\r\n            return action.pokemons;\r\n        default:\r\n            return state;\r\n    };\r\n})\r\n\r\nexport const thunkYourMom = (limit, offset) => {\r\n    return async dispatch => {\r\n        try {\r\n            const pokemons = loadPokemonsFromLS(limit, offset);\r\n            dispatch({ type: 'INIT_POKEMONS', pokemons });\r\n        } catch (error) {\r\n            const pokemonsData = await getPokemons.getPokemons(limit, offset);\r\n            let pokemons = [];\r\n            let pokemonsObject = {};\r\n            console.log(pokemonsData)\r\n            pokemonsData.results.forEach(async (r, i) => {\r\n                //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\r\n                const pokemonNow = await axios.get(r.url);\r\n                pokemonsObject[i] = pokemonNow.data;\r\n            });\r\n            pokemons = [{...pokemonsObject }];\r\n            console.log(pokemons);\r\n            console.log(pokemonsObject);\r\n            savePokemonsList(limit, offset, pokemonsObject);\r\n            dispatch({ type: 'INIT_POKEMONS', pokemons });\r\n        };\r\n    };    \r\n};\r\n\r\nexport const fetchEverything = (limit, offset) => {\r\n    return thunkYourMom(limit, offset);\r\n};\r\n\r\n/*\r\nexport const fetchPokemons = (limit, offset) => {\r\n    return async dispatch => {\r\n        try {\r\n            const pokemons = loadPokemonsFromLS(limit, offset);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemons });\r\n        } catch (error) {\r\n            const pokemons = await getPokemons.getPokemons(limit, offset);\r\n            let pokemonsArray = [];\r\n            let pokemonsObject = {};\r\n            pokemons.results.forEach(async (r, i) => {\r\n                //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\r\n                const pokemonNow = await axios.get(r.url);\r\n                pokemonsArray.push(pokemonNow.data);\r\n                pokemonsObject[i] = pokemonNow.data\r\n            });\r\n            savePokemonsList(limit, offset, pokemonsObject);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemonsArray });\r\n        };\r\n    };   \r\n};*/\r\n\r\nexport default pokemonsReducer;"]},"metadata":{},"sourceType":"module"}