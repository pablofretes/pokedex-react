{"ast":null,"code":"import getPokemons from '../services/pokemons';\nimport axios from 'axios';\nimport { loadPokemonsFromLS, savePokemonsList } from '../utils/localStoragePokemons';\nimport produce from 'immer';\nconst pokemonsReducer = produce((state = {\n  pokemons: []\n}, action) => {\n  switch (action.type) {\n    case 'INIT_POKEMONS':\n      console.log(action);\n      return action.pokemons;\n\n    default:\n      return state;\n  }\n\n  ;\n});\nexport const thunkYourMom = pokemons => {\n  return dispatch => {\n    dispatch({\n      type: 'INIT_POKEMONS',\n      pokemons\n    });\n  };\n};\nexport const fetchEverything = async (limit, offset) => {\n  try {\n    const pokemons = loadPokemonsFromLS(limit, offset);\n    return thunkYourMom(pokemons);\n  } catch (error) {\n    const pokemonsData = await getPokemons.getPokemons(limit, offset);\n    let pokemons = [];\n    let pokemonsObject = {};\n    console.log(pokemonsData);\n    pokemonsData.results.forEach(async (r, i) => {\n      //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\n      const pokemonNow = await axios.get(r.url);\n      pokemonsObject[i] = pokemonNow.data; //console.log([pokemonNow.data][0]);\n\n      pokemons.push(pokemonNow.data);\n    });\n    console.log(pokemons);\n    console.log(pokemonsObject);\n    savePokemonsList(limit, offset, pokemonsObject);\n    return thunkYourMom(pokemons);\n  }\n\n  ;\n};\n/*\r\nexport const fetchPokemons = (limit, offset) => {\r\n    return async dispatch => {\r\n        try {\r\n            const pokemons = loadPokemonsFromLS(limit, offset);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemons });\r\n        } catch (error) {\r\n            const pokemons = await getPokemons.getPokemons(limit, offset);\r\n            let pokemonsArray = [];\r\n            let pokemonsObject = {};\r\n            pokemons.results.forEach(async (r, i) => {\r\n                //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\r\n                const pokemonNow = await axios.get(r.url);\r\n                pokemonsArray.push(pokemonNow.data);\r\n                pokemonsObject[i] = pokemonNow.data\r\n            });\r\n            savePokemonsList(limit, offset, pokemonsObject);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemonsArray });\r\n        };\r\n    };   \r\n};*/\n\nexport default pokemonsReducer;","map":{"version":3,"sources":["C:/Users/pablo/OneDrive/Escritorio/pokedex-react/pokedex/frontend/src/reducers/pokemonsReducer.js"],"names":["getPokemons","axios","loadPokemonsFromLS","savePokemonsList","produce","pokemonsReducer","state","pokemons","action","type","console","log","thunkYourMom","dispatch","fetchEverything","limit","offset","error","pokemonsData","pokemonsObject","results","forEach","r","i","pokemonNow","get","url","data","push"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,sBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,+BAArD;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,MAAMC,eAAe,GAAGD,OAAO,CAAC,CAACE,KAAK,GAAG;AAAEC,EAAAA,QAAQ,EAAC;AAAX,CAAT,EAA0BC,MAA1B,KAAqC;AACjE,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,aAAOA,MAAM,CAACD,QAAd;;AACJ;AACI,aAAOD,KAAP;AALR;;AAMC;AACJ,CAR8B,CAA/B;AAUA,OAAO,MAAMM,YAAY,GAAIL,QAAD,IAAc;AACtC,SAAOM,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AACLJ,MAAAA,IAAI,EAAE,eADD;AAELF,MAAAA;AAFK,KAAD,CAAR;AAIH,GALD;AAMH,CAPM;AASP,OAAO,MAAMO,eAAe,GAAG,OAAOC,KAAP,EAAcC,MAAd,KAAyB;AACpD,MAAI;AACA,UAAMT,QAAQ,GAAGL,kBAAkB,CAACa,KAAD,EAAQC,MAAR,CAAnC;AACA,WAAOJ,YAAY,CAACL,QAAD,CAAnB;AACH,GAHD,CAGE,OAAOU,KAAP,EAAc;AACZ,UAAMC,YAAY,GAAG,MAAMlB,WAAW,CAACA,WAAZ,CAAwBe,KAAxB,EAA+BC,MAA/B,CAA3B;AACA,QAAIT,QAAQ,GAAG,EAAf;AACA,QAAIY,cAAc,GAAG,EAArB;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAYO,YAAZ;AACAA,IAAAA,YAAY,CAACE,OAAb,CAAqBC,OAArB,CAA6B,OAAOC,CAAP,EAAUC,CAAV,KAAgB;AACzC;AACA,YAAMC,UAAU,GAAG,MAAMvB,KAAK,CAACwB,GAAN,CAAUH,CAAC,CAACI,GAAZ,CAAzB;AACAP,MAAAA,cAAc,CAACI,CAAD,CAAd,GAAoBC,UAAU,CAACG,IAA/B,CAHyC,CAIzC;;AACApB,MAAAA,QAAQ,CAACqB,IAAT,CAAcJ,UAAU,CAACG,IAAzB;AACH,KAND;AAOAjB,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYQ,cAAZ;AACAhB,IAAAA,gBAAgB,CAACY,KAAD,EAAQC,MAAR,EAAgBG,cAAhB,CAAhB;AACA,WAAOP,YAAY,CAACL,QAAD,CAAnB;AACH;;AAAA;AAEJ,CAtBM;AAwBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeF,eAAf","sourcesContent":["import getPokemons from '../services/pokemons';\r\nimport axios from 'axios';\r\nimport { loadPokemonsFromLS, savePokemonsList } from '../utils/localStoragePokemons';\r\nimport produce from 'immer';\r\n\r\nconst pokemonsReducer = produce((state = { pokemons:[] }, action) => {\r\n    switch(action.type){\r\n        case 'INIT_POKEMONS':\r\n            console.log(action);\r\n            return action.pokemons;\r\n        default:\r\n            return state;\r\n    };\r\n})\r\n\r\nexport const thunkYourMom = (pokemons) => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: 'INIT_POKEMONS',\r\n            pokemons,\r\n        });\r\n    };\r\n};\r\n\r\nexport const fetchEverything = async (limit, offset) => {\r\n    try {\r\n        const pokemons = loadPokemonsFromLS(limit, offset);\r\n        return thunkYourMom(pokemons);\r\n    } catch (error) {\r\n        const pokemonsData = await getPokemons.getPokemons(limit, offset);\r\n        let pokemons = [];\r\n        let pokemonsObject = {};\r\n        console.log(pokemonsData)\r\n        pokemonsData.results.forEach(async (r, i) => {\r\n            //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\r\n            const pokemonNow = await axios.get(r.url);\r\n            pokemonsObject[i] = pokemonNow.data;\r\n            //console.log([pokemonNow.data][0]);\r\n            pokemons.push(pokemonNow.data);\r\n        });\r\n        console.log(pokemons);\r\n        console.log(pokemonsObject);\r\n        savePokemonsList(limit, offset, pokemonsObject);\r\n        return thunkYourMom(pokemons);\r\n    };\r\n    \r\n};\r\n\r\n/*\r\nexport const fetchPokemons = (limit, offset) => {\r\n    return async dispatch => {\r\n        try {\r\n            const pokemons = loadPokemonsFromLS(limit, offset);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemons });\r\n        } catch (error) {\r\n            const pokemons = await getPokemons.getPokemons(limit, offset);\r\n            let pokemonsArray = [];\r\n            let pokemonsObject = {};\r\n            pokemons.results.forEach(async (r, i) => {\r\n                //FETCHES EACH POKEMON URL AND STORES ITS DATA ON pokemons STATE\r\n                const pokemonNow = await axios.get(r.url);\r\n                pokemonsArray.push(pokemonNow.data);\r\n                pokemonsObject[i] = pokemonNow.data\r\n            });\r\n            savePokemonsList(limit, offset, pokemonsObject);\r\n            dispatch({ type: 'INIT_POKEMONS', data: pokemonsArray });\r\n        };\r\n    };   \r\n};*/\r\n\r\nexport default pokemonsReducer;"]},"metadata":{},"sourceType":"module"}