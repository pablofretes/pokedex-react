{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pablo\\\\OneDrive\\\\Escritorio\\\\pokedex-react\\\\pokedex\\\\frontend\\\\src\\\\components\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport TextField from './TextField';\nimport { Field, Formik, Form } from 'formik';\nimport { Button } from '@material-ui/core';\nimport * as yup from 'yup';\nimport { useHistory } from 'react-router';\nimport login from '../services/login';\nimport { useDispatch } from 'react-redux';\nimport { setUser } from '../reducers/userReducer';\nimport { notificationError, notificationSuccess } from '../reducers/notificationReducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object().shape({\n  username: yup.string().required().min(5, 'Username must contain at least 5 characters'),\n  password: yup.string().required().min(5, 'Username must contain at least 5 characters')\n});\n\nconst Login = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const onSubmit = async event => {\n    console.log(event);\n    const credentials = {\n      username: event.username,\n      password: event.password\n    };\n\n    try {\n      const user = await login.login(credentials);\n\n      if (user) {\n        window.localStorage.setItem('loggedUser', JSON.stringify(user));\n        dispatch(setUser(user));\n        dispatch(notificationSuccess('You have logged in!'));\n        login.setToken(user.token);\n        history.push('/');\n      }\n\n      ;\n    } catch (error) {\n      console.log(error);\n      dispatch(notificationError('Your password or username are incorrect.'));\n      return null;\n    }\n\n    ;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      username: '',\n      password: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: onSubmit,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      className: \"form ui\",\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        label: \"Username\",\n        placeholder: \"Username\",\n        name: \"username\",\n        component: TextField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        label: \"Password\",\n        placeholder: \"Password\",\n        name: \"password\",\n        component: TextField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"FxNkVwM1QRg2/kU3+RDi4ll7EAM=\", false, function () {\n  return [useDispatch, useHistory];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/pablo/OneDrive/Escritorio/pokedex-react/pokedex/frontend/src/components/Login.js"],"names":["React","TextField","Field","Formik","Form","Button","yup","useHistory","login","useDispatch","setUser","notificationError","notificationSuccess","validationSchema","object","shape","username","string","required","min","password","Login","dispatch","history","onSubmit","event","console","log","credentials","user","window","localStorage","setItem","JSON","stringify","setToken","token","push","error"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport TextField from './TextField';\r\nimport { Field, Formik, Form } from 'formik';\r\nimport { Button } from '@material-ui/core';\r\nimport * as yup from 'yup';\r\nimport { useHistory } from 'react-router';\r\nimport login from '../services/login';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setUser } from '../reducers/userReducer'; \r\nimport { notificationError, notificationSuccess } from '../reducers/notificationReducer';\r\n\r\nconst validationSchema = yup.object().shape({\r\n    username: yup\r\n        .string()\r\n        .required()\r\n        .min(5, 'Username must contain at least 5 characters'),\r\n    password: yup\r\n        .string()\r\n        .required()\r\n        .min(5, 'Username must contain at least 5 characters'),\r\n});\r\n\r\nconst Login = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const onSubmit = async (event) => {\r\n        console.log(event);\r\n        const credentials = {\r\n            username: event.username,\r\n            password: event.password,\r\n        };\r\n\r\n        try {\r\n            const user = await login.login(credentials);\r\n            if(user){\r\n                window.localStorage.setItem('loggedUser', JSON.stringify(user))\r\n                dispatch(setUser(user));\r\n                dispatch(notificationSuccess('You have logged in!'))\r\n                login.setToken(user.token)\r\n                history.push('/');\r\n            };    \r\n        } catch (error) {\r\n            console.log(error);\r\n            dispatch(notificationError('Your password or username are incorrect.'))\r\n            return null;\r\n        };\r\n    };\r\n\r\n    return(\r\n        <Formik\r\n            initialValues={{\r\n                username:'',\r\n                password:'',\r\n            }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={onSubmit}\r\n        >\r\n            <Form className=\"form ui\">\r\n                <Field\r\n                    label=\"Username\"\r\n                    placeholder=\"Username\"\r\n                    name=\"username\"\r\n                    component={TextField}\r\n                />\r\n                <Field\r\n                    label=\"Password\"\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    component={TextField}\r\n                />\r\n                <Button\r\n                    type=\"submit\"\r\n                >\r\n                    Log In\r\n                </Button>\r\n            </Form>\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}